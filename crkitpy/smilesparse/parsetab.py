
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ATOM ATOM_H BOND CHARGE COLON CYCLE_NUM DOT LPAREN LSQUAR MAP_NUM NUM RPAREN RSQUARexpression : ATOMexpression : LSQUAR ATOM\n                      | LSQUAR ATOM_Hexpression : expression LSQUAR ATOM_Hexpression : expression DOTexpression : expression CHARGEexpression : expression BONDexpression : expression ATOMexpression : expression ATOM_H NUMexpression : expression ATOM_Hexpression : expression LPARENexpression : expression RPARENexpression : expression MAP_NUMexpression : expression CYCLE_NUMexpression : expression NUMexpression : expression RSQUAR\n                      | expression LSQUARexpression : expression COLON'
    
_lr_action_items = {'ATOM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[2,9,-1,17,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'LSQUAR':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[3,4,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'$end':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[0,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'DOT':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[6,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'CHARGE':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[7,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'BOND':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[8,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'ATOM_H':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[5,-1,18,19,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'LPAREN':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[11,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'RPAREN':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[12,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'MAP_NUM':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[13,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'CYCLE_NUM':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[14,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'NUM':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[10,-1,-17,20,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'RSQUAR':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[15,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),'COLON':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[16,-1,-17,-10,-5,-6,-7,-8,-15,-11,-12,-13,-14,-16,-18,-2,-3,-4,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> ATOM','expression',1,'p_atom','smiles_yacc.py',19),
  ('expression -> LSQUAR ATOM','expression',2,'p_atom_in_square','smiles_yacc.py',28),
  ('expression -> LSQUAR ATOM_H','expression',2,'p_atom_in_square','smiles_yacc.py',29),
  ('expression -> expression LSQUAR ATOM_H','expression',3,'p_bond_atom_h_start_by_lsquar','smiles_yacc.py',37),
  ('expression -> expression DOT','expression',2,'p_dot','smiles_yacc.py',50),
  ('expression -> expression CHARGE','expression',2,'p_charge','smiles_yacc.py',58),
  ('expression -> expression BOND','expression',2,'p_bond','smiles_yacc.py',65),
  ('expression -> expression ATOM','expression',2,'p_bond_atom','smiles_yacc.py',78),
  ('expression -> expression ATOM_H NUM','expression',3,'p_bond_many_atom_h','smiles_yacc.py',94),
  ('expression -> expression ATOM_H','expression',2,'p_bond_one_atom_h','smiles_yacc.py',101),
  ('expression -> expression LPAREN','expression',2,'p_begin_paren','smiles_yacc.py',108),
  ('expression -> expression RPAREN','expression',2,'p_end_paren','smiles_yacc.py',115),
  ('expression -> expression MAP_NUM','expression',2,'p_map_num','smiles_yacc.py',122),
  ('expression -> expression CYCLE_NUM','expression',2,'p_complex_cycle_num','smiles_yacc.py',128),
  ('expression -> expression NUM','expression',2,'p_simple_cycle_num','smiles_yacc.py',141),
  ('expression -> expression RSQUAR','expression',2,'p_only_square','smiles_yacc.py',155),
  ('expression -> expression LSQUAR','expression',2,'p_only_square','smiles_yacc.py',156),
  ('expression -> expression COLON','expression',2,'p_colon','smiles_yacc.py',160),
]
